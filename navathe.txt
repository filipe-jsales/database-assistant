Os bancos de dados e os sistemas de bancos de dados se tornaram componentes essenciais no cotidiano da sociedade moderna. No decorrer do dia, a maioria de nós se depara com atividades que envolvem alguma interação com os bancos de dados. Por exemplo, se formos ao banco para efetuarmos um depósito ou retirar dinheiro, se fizermos reservas em um hotel ou para a compra de passagens aéreas, se acessarmos o catálogo de uma biblioteca informatizada para consultar uma bibliografia, ou se comprarmos produtos - como livros, brinquedos ou computadores - de um fornecedor por intermédio de sua página Web, muito provavelmente essas atividades envolverão uma pessoa ou um programa de computador que acessará um banco de dados. Até mesmo os produtos adquiridos em supermercados, em muitos casos, atualmente, incluem uma atualização automática do banco de dados que mantém o controle do estoque disponível nesses estabelecimentos. Essas interações são exemplos do que podemos denominar aplicações tradicionais de banco de dados, no qual a maioria das informações que são armazenadas e acessadas apresenta-se em formatos textual ou numérico. Nos últimos anos, os avanços tecnológicos geraram aplicações inovadoras e interessantes dos sistemas de banco de dados. Os bancos de dados de multimídia podem, agora, armazenar figuras, videoclipes e mensagens sonoras. Os sistemas de informações geográficas (geographic information systems - GIS) são capazes de armazenar e analisar mapas, dados do tempo e imagens de satélite. Os data warehouses e os online analytical processing (OLAP) - processamento analítico on-line - são utilizados em muitas empresas para extrair e analisar as informações úteis dos bancos de dados para a tomada de decisões. A tecnologia de bancos de dados ativos (active database technology) e real time (tempo real) são usados no controle de processos industriais e de produção (indústria). As técnicas de pesquisa em banco de dados estão sendo aplicadas na World Wide Web para aprimorar a recuperação de informações necessárias pelos usuários da Internet. Entretanto, para entendermos os fundamentos da tecnologia de banco de dados, devemos começar pelas aplicações tradicionais de bancos de dados. Sendo assim, na Seção 1.1 deste capítulo, definimos o que é um banco de dados e conceituamos alguns termos básicos. Na Seção 1.2 apresentamos um banco de dados como exemplo, uma UNIVERSIDADE, para ilustrar nossa discussão. Em seguida, na Seção 1.3, descrevemos algumas características principais dos sistemas de banco de dados, e nas seções 1.4 e 1.5 categorizamos os tipos de pessoas cujas profissões envolvem o uso e a interação com os sistemas de banco de dados. Nas seções 1.6, 1.7 e 1.8 discutiremos as diversas capacidades de um sistema de banco de dados e algumas aplicações típicas. A Seção 1.9 resume todo o capítulo.
1.1 Introdução: Os bancos de dados e a sua tecnologia estão provocando um grande impacto no crescimento do uso de computadores. É viável afirmar que eles representam um papel crítico em quase todas as áreas em que os computadores são utilizados, incluindo negócios, comércio eletrônico, engenharia, medicina, direito, educação e as ciências da informação, para citar apenas algumas delas. A palavra banco de dados é tão comumente utilizada que, primeiro, devemos defini-la. Nossa definição inicial é bastante genérica. Um banco de dados é uma coleção de dados relacionados. Os dados são fatos que podem ser gravados e que possuem um significado implícito. Por exemplo, considere nomes, números telefônicos e endereços de pessoas que você conhece. Esses dados podem ter sido escritos em uma agenda de telefones ou armazenados em um computador, por meio de programas como o Microsoft Access ou  Excel. Essas informações são uma coleção de dados com um significado implícito, conseqüentemente, um banco de dados. A definição de banco de dados, mencionada anteriormente, é muito genérica. Por exemplo, podemos considerar o conjunto de palavras que formam esta página como dados relacionados, portanto, constituindo um banco de dados. No entanto, o uso do termo banco de dados é geralmente mais restrito. Possui as seguintes propriedades implícitas:  Um banco de dados representa alguns aspectos do mundo real, sendo chamado, às vezes, de minimundo ou de universo de discurso (UoD). As mudanças no minimundo são refletidas em um banco de dados.  Um banco de dados é uma coleção lógica e coerente de dados com algum significado inerente. Uma organização de dados ao acaso (randômica) não pode ser corretamente interpretada como um banco de dados.  Um banco de dados é projetado, construído e povoado por dados, atendendo a uma proposta específica. Possui um grupo de usuários definido e algumas aplicações preconcebidas, de acordo com o interesse desse grupo de usuários. Em outras palavras, um banco de dados possui algumas fontes das quais os dados são derivados, alguns níveis de interação com os eventos do mundo real e um público efetivamente interessado em seus conteúdos. Um banco de dados pode ser de qualquer tamanho e de complexidade variável. Por exemplo, a lista de nomes e endereços, citada anteriormente, pode possuir apenas poucas centenas de registros, cada um com uma estrutura simples. Porém, o catálogo computadorizado de uma grande biblioteca pode conter meio milhão de entradas organizadas em diferentes categorias - pelo sobrenome principal do autor, pelo assunto, pelo título -, sendo cada categoria organizada em ordem alfabética. Um banco de dados muito maior e mais complexo é mantido pelo Internal Revenue Service (IRS), órgão responsável pelo controle dos formulários de impostos preenchidos pelos contribuintes dos Estados Unidos.
Se pressupomos que existam cem milhões de contribuintes e cada um deles preenche em média cinco formulários com aproximadamente 400 caracteres de informações por formulário, teríamos um banco de dados de 100 x 10° x 400 x 5 caracteres (bytes) de informação. Se o IRS mantiver os últimos três formulários para cada contribuinte teremos, além do atual, um banco de dados de 8 x 100 bytes (800 gigabytes). Essa imensa quantidade de informação deve ser organizada e gerenciada para que os usuários possam pesquisar, recuperar e atualizar os dados necessários. Um banco de dados pode ser gerado e mantido manualmente ou pode ser automatizado (computadorizado). Por exemplo, um catálogo de cartões bibliotecários é um banco de dados que oferece a possibilidade de ser criado e mantido manualmente. Um banco de dados computadorizado pode ser criado e mantido tanto por um grupo de aplicativos escritos especialmente para essa tarefa como por um sistema gerenciador de banco de dados. É claro que, neste livro, o objetivo é abordar os bancos de dados computadorizados. Um sistema gerenciador de banco de dados (SGBD) é uma coleção de programas que permite aos usuários criar e manter um banco de dados. O SGBD é, portanto, um sistema de software de propósito geral que facilita os processos de definição, construção, manipulação e compartilhamento de bancos de dados entre vários usuários e aplicações. A definição de um banco de dados implica especificar os tipos de dados, as estruturas e as restrições para os dados a serem armazenados em um banco de dados. A construção de um banco de dados é o processo de armazenar os dados em alguma mídia apropriada controlada pelo SGBD. A manipulação inclui algumas funções, como pesquisas em banco de dados para recuperar um dado específico, atualização do banco para refletir as mudanças no minimundo e gerar os relatórios dos dados. O compartilhamento permite aos múltiplos usuários e programas acessar, de forma concorrente, o banco de dados. Outras funções importantes do SGBD são a proteção e a manutenção do banco de dados por longos períodos. A proteção inclui a proteção do sistema contra o mau funcionamento ou falhas (crashes) no hardware ou software, e segurança contra acessos não autorizados ou maliciosos. Um banco de dados típico pode ter um ciclo de vida de muitos anos, então, os SGBD devem ser capazes de manter um sistema de banco de dados que permita a evolução dos requisitos que se alteram ao longo do tempo. Não é necessário usar os softwares SGBD típicos para implementar um banco de dados computadorizado. Poderíamos escrever nosso próprio conjunto de programas para criar e manter um banco de dados criando, de fato, nosso próprio SGBD com uma finalidade específica. Nesses casos - se usarmos um SGBD de propósito geral ou não -, normalmente teremos de desenvolver uma quantidade considerável de softwares complexos.
Na verdade, a maioria dos SGBD é composta por sistemas muito complexos. Para completar nossa definição inicial chamaremos o banco de dados e o software SGBD, juntos, de sistema de banco de dados. A Figura 1.1 ilustra alguns dos conceitos discutidos. 1.2 UM EXEMPLO Considerando um exemplo simples com o qual a maioria dos leitores está muito familiarizada: um banco de dados de uma UNIVERSIDADE,  no qual são mantidas as informações do meio acadêmico, como alunos, cursos e notas. A Figura 1.2 mostra a estrutura do banco de dados e fornece uma pequena amostra dos dados desse banco. O banco é organizado em cinco arquivos, cada um armazena os registros de dados do mesmo tipo. O arquivo ALUNO conserva os dados de cada estudante, o CURSO preserva os dados sobre cada curso, o arquivo DISCIPLINA guarda os dados de cada disciplina do curso. Continuando, o arquivo HISTORICO_ESCOLAR mantém as notas recebidas por aluno nas diversas disciplinas cursadas e, finalmente, o arquivo PRE_REQUISITO armazena os pré-requisitos de cada curso. Para definir esse banco de dados devemos especificar a estrutura de cada registro em cada arquivo, considerando-se os diferentes tipos de elementos dos dados a serem armazenados em cada registro. Na Figura 1.2, cada registro ALUNO inclui os dados que representam o NomedoEstudante, NumerodoAluno, Turma (calouro ou 1, veterano ou 2...) e Curso Habilitação (matemática ou mat, ciência da computação ou CC...); cada registro CURSO apresenta dados como NomedoCurso, NumerodoCurso, Créditos e Departamento (que oferece o curso) etc. Precisamos ainda especificar os tipos de dados para cada elemento de dados em um registro. Por exemplo, podemos especificar que nome em ALUNO é uma string (cadeia) de caracteres alfabéticos, número do aluno em ALUNO é um inteiro (integer) e o HISTORICO_ESCOLAR é um caractere único do conjunto {A, B, C, D, F, I}. Podemos usar ainda um esquema de código para representar os valores de um determinado dado. Por exemplo, na Figura 1.2, representamos a turma do ALUNO por 1 para os calouros; 2 para os veteranos; 3 para os que cursam o penúltimo ano; 4 para aqueles do último ano; e 5 para os alunos graduados. Para construir o banco de dados UNIVERSIDADE armazenamos os dados que representem cada aluno, curso, disciplina, relatório de notas e pré-requisitos, bem como cada registro no arquivo apropriado. Pode-se perceber que os registros de diferentes arquivos podem estar relacionados. Por exemplo, o registro para "Smith" no arquivo ALUNO está relacionado a dois registros no arquivo  HISTORICO_ESCOLAR, cuja função é especificar as notas de Smith em duas disciplinas. Por similaridade, cada registro, no arquivo PRE_REQUISITO, está relacionado a dois registros em curso: um representando o curso e o outro, o pré-requisito. A maioria dos bancos de dados médios e grandes inclui muitos tipos de registros e tem muitos relacionamentos entre os registros.

Um número significativo de características distingue a abordagem que utiliza o banco de dados daquela tradicional que usa a programação e arquivos. No tradicional processamento de arquivos, cada usuário define e implementa os arquivos necessários para  uma aplicação específica, como parte da programação da aplicação. Por exemplo, um usuário, a secretaria de notas, pode manter um arquivo para os alunos e suas notas. Os programas para imprimir um histórico do aluno e colocar novas notas no arquivo são implementados como parte da aplicação. Um segundo usuário, o departamento de contabilidade, pode controlar os dados relacionados às mensalidades e pagamentos dos alunos. Apesar de ambos os usuários estarem interessados nos dados sobre os estudantes, cada um mantém suas informações em arquivos separados - e os programas que manipulam esses arquivos - porque cada um deles precisa de alguns dados não disponíveis nos arquivos do outro.
Essas redundâncias, na definição e armazenamento dos dados, resultam em um espaço de armazenamento desperdiçado e em esforços redundantes para manter os dados comuns atualizados. Na abordagem utilizando um banco de dados, um único repositório de dados é definido uma única vez, mantido e então acessado por vários usuários. As principais características da abordagem de um banco de dados versus a abordagem de processamento de arquivos são as seguintes: - Natureza autodescritiva do sistema de banco de dados. - Isolamento entre os programas e os dados, e a abstração dos dados. - Suporte para as múltiplas visões dos dados. - Compartilhamento de dados e processamento de transações de multiusuários.  Descreveremos, a seguir, cada característica em seções separadas. As características adicionais dos sistemas de banco de dados serão discutidas nas seções 1.6 a 1.8.

**Seção 1.3.1 Natureza Autodescritiva do Sistema de Banco de Dados:**  Uma característica fundamental da abordagem de um banco de dados é que o sistema de banco de dados possui não apenas o banco de dados, mas também uma completa definição ou descrição da estrutura desse banco de dados e suas restrições. Essa definição está armazenada no catálogo do SGBD, que contém informações como a estrutura de cada arquivo, o tipo e o formato de armazenamento de cada item de dado e várias restrições sobre os dados. A informação armazenada no catálogo é chamada metadados e descreve a estrutura do banco de dados primário (Figura 1.1). O catálogo é usado tanto pelo software SGBD como pelos usuários do banco de dados que precisam de informações sobre a estrutura desse banco. Um pacote de software SGBD de propósito geral não está escrito para uma aplicação específica, portanto, será necessário acessar o catálogo para conhecer a estrutura dos arquivos no banco de dados, como o tipo e o formato dos dados que o programa vai acessar. O SGBD precisa trabalhar bem com qualquer número de aplicações - por exemplo, um banco de dados de uma universidade, de um banco ou de uma empresa -, desde que a definição do banco de dados esteja armazenada no catálogo. No processamento tradicional de arquivos, a definição dos dados faz parte dos próprios programas da aplicação. Em conseqüência disso, esses programas são restritos a trabalhar com um único banco de dados específico, cuja estrutura esteja declarada no programa da aplicação. Por exemplo, um software de uma aplicação escrito em C++ pode ter a struct ou a declaração de classes, e um programa em COBOL tem comandos na Data Division para definir seus arquivos. Porém, o programa de processamento de arquivos possibilita o acesso a um único banco de dados específico, enquanto o SGBD pode acessar diversos bancos de dados, extraindo as definições de banco de dados do catálogo e usando-as depois. No exemplo mostrado na Figura 1.2, o catálogo do SGBD armazenará as definições de todos os arquivos mostrados. Elas são especificadas pelo projetista antes de criar o banco de dados real e armazenadas no catálogo. Todas as vezes que um pedido for feito para acessar, digamos, o registro Nome de um ALUNO, o SGBD se referirá ao catálogo para determinar a estrutura do arquivo ALUNO e a posição e tamanho do item de dado Nome dentro do registro ALUNO. Em contraste, em uma aplicação típica de processamento de arquivos, a estrutura do arquivo e a localização exata, no caso extremo, de Nome dentro do registro ALUNO, já estão codificadas em cada programa que acessa esses itens de dados. 

**Seção 1.3.2 Isolamento entre os Programas e Dados e Abstração de Dados:** No processamento tradicional de arquivos, a estrutura do arquivo de dados está embutida no programa da aplicação, sendo assim, qualquer mudança na estrutura de um arquivo pode exigir alterações de todos os programas que acessam esse arquivo. Ao contrário, os programas para acesso ao SGBD não exigem essas alterações na maioria dos casos. A estrutura dos arquivos de dados é armazenada no catálogo do SGDB separadamente do programa de acesso. Denominaremos essa propriedade independência programadados. Por exemplo, o programa de acesso a arquivos pode ser escrito de forma que acesse, apenas, os registros ALUNO da estrutura apresentada na Figura 1.3. Se quisermos adicionar outro dado ao registro de cada ALUNO, digamos, sua DatadeNascimento, esse programa não vai trabalhar por muito tempo e precisará ser alterado. Ao contrário, em um ambiente SGBD, necessitamos alterar apenas a descrição do registro ALUNO no catálogo para refletir a inclusão do novo item de dados DatadeNascimento; nenhum programa será modificado. A próxima vez que um programa SGBD acessar o catálogo, a nova estrutura do registro ALUNO será acessada e utilizada. Em alguns tipos de sistemas de banco de dados, como o orientado a objeto e o objeto-relacional (capítulos 20 a 22), os usuários podem estabelecer as operações sobre os dados como parte das definições de dados. Uma operação (também chamada função ou método) é especificada em duas partes. A interface (ou assinatura) de uma operação inclui o nome da operação e os tipos de dados de seus argumentos (ou parâmetros). A implementação (ou método) de uma operação é definida separadamente e pode ser alterada sem afetar a interface. Os programas de usuários da aplicação podem operar nos dados invocando essas operações por meio de seus nomes e argumentos, sem considerar como essas operações são implementadas. Isso pode ser chamado de independência programaoperação. A característica que permite a independência programa-dados e programa-operação é intitulada abstração de dados. Um SGBD oferece aos usuários uma representação conceitual de dados que não inclui muitos detalhes sobre como o dado é armazenado ou como as operações são implementadas. Informalmente, o modelo de dados é um tipo de abstração de dados usado para prover essa representação conceitual. O modelo de dados utiliza os conceitos lógicos, como objetos, suas propriedades e seus interrelacionamentos, que podem ser mais fáceis para os usuários entenderem os conceitos de armazenamento computacionais. Conseqüentemente, o modelo de dados esconde os detalhes de armazenamento e da implementação, desinteressantes para a maioria dos usuários de banco de dados.
Por exemplo, vamos considerar novamente a Figura 1.2. A implementação interna do arquivo pode ser definida pelo comprimento de seus registros -, o número de caracteres (bytes) em cada registro -, e cada item de dado pode ser especificado pelo seu byte inicial dentro de um registro e seu comprimento em bytes. O registro ALUNO poderia, em razão disso, ser representado como exposto na Figura 1.3. No entanto, um usuário típico de banco de dados não está preocupado com a localização de cada item de dados dentro de um registro ou com o seu comprimento; na realidade, sua preocupação é que quando for acessado o Nome do ALUNO, O valor correto seja retornado. Uma representação conceitual dos registros ALUNO é mostrada na Figura 1.2. Muitos outros detalhes da organização do armazenamento de dados, como os caminhos de acesso especificados em um arquivo, podem ser escondidos dos usuários de banco de dados pelo SGBD - discutiremos os detalhes do armazenamento nos capítulos 13 e 14. Na abordagem de banco de dados, a estrutura detalhada e a organização de cada arquivo são armazenadas no catálogo. Os usuários de banco de dados e os programas de aplicação referem-se à representação conceitual dos arquivos, e o SGBD extrai os detalhes do armazenamento de arquivos do catálogo, quando são necessários, pelos módulos de acesso a arquivos do SGBD. Muitos modelos de dados podem ser utilizados para prover essa abstração dos dados aos usuários do banco. A maior parte deste livro é dedicada à apresentação dos vários modelos de dados e os conceitos que estes utilizam para abstrair a representação dos dados. Nos bancos de dados orientados a objeto e a objeto-relacional, o processo de abstração não inclui apenas a estrutura de dados, mas também as operações sobre os dados. Essas operações oferecem uma abstração das atividades do minimundo facilmente entendidas pelos usuários. Por exemplo, uma operação de CALCULO_GPA pode ser aplicada ao objeto ALUNO para calcular a média de pontos nas notas. Essas operações podem ser invocadas pela consulta do usuário ou pelos programas de aplicação sem ter de se saber os detalhes de como as operações são implementadas. Nesse sentido, uma abstração de uma atividade de um minimundo está disponível para o usuário como uma operação abstrata.

1.3.4 Compartilhamento de Dados e o Processamento de Transação Multiusuários: Um SGBD multiusuário, como o nome implica, deve permitir que diversos usuários acessem o banco de dados ao mesmo tempo. Isso é essencial se os dados para as várias aplicações estão integrados e mantidos em um único banco de dados. O SGBD deve incluir um software de controle de concorrência para garantir que muitos usuários, ao tentar atualizar o mesmo dado, o façam de um modo controlado, para assegurar que os resultados das atualizações sejam corretos. Por exemplo, quando muitos atendentes tentam reservar um lugar em um vôo, o SGBD deve garantir que cada assento possa ser acessado somente por um atendente de cada vez, para fazer a reserva de apenas um passageiro. Esses tipos de aplicações são, normalmente, denominados aplicações de processamento de transações on-line - online transaction processing (OLTP). Uma regra fundamental do software do SGBD multiusuário é garantir que as transações concorrentes operem corretamente. O conceito de transação tornou-se fundamental para muitas aplicações de banco de dados. Uma transação é um programa em execução ou processo que inclui um ou mais acessos ao banco de dados, como a leitura ou a atualização de registros. Cada transação deve executar um acesso logicamente correto ao banco de dados, se executado sem a interferência de outras transações. O SGBD deve garantir várias propriedades da transação. A propriedade de isolamento garante que cada transação possa ser efetuada de forma isolada de outras transações; mesmo centenas de transações podem ser executadas simultaneamente. A propriedade de atomicidade garante que todas as operações em um banco de dados, em uma transação, sejam executadas ou nenhuma delas o seja. Discutiremos as transações em detalhes na Parte V do livro. As características precedentes são muito importantes para distinguir um SGBD de um software tradicional de processamento de arquivos. Na Seção 1.6 abordaremos as funcionalidades adicionais que caracterizam um SGBD. Primeiro, no entanto, categorizaremos os diferentes tipos de pessoas que trabalham em um ambiente de sistema de banco de dados.

1.4 ATORES NO PALCO: Para um pequeno banco de dados pessoal, como a agenda de endereços discutida na Seção 1.1, uma pessoa em geral define, constrói e manipula um banco de dados - não há compartilhamento. No entanto, muitas pessoas estão envolvidas no projeto, uso e manutenção de um grande banco de dados com centenas de usuários. Nesta seção, identificaremos as pessoas cujas profissões envolvem o dia-a-dia do uso de um grande banco de dados; nós as chamaremos de 'atores no palco'. Na Seção 1.5 consideraremos as pessoas que podem ser nomeadas 'trabalhadores dos bastidores', ou seja, aqueles que trabalham para manter o ambiente dos sistemas de banco de dados, mas que não estão interessados no banco de dados de fato. 

1.4.1 Administradores de Banco de Dados: Em uma organização na qual muitas pessoas usam os mesmos recursos, há a necessidade de um administrador-chefe para gerenciar esses recursos. No ambiente de banco de dados, o principal recurso é o próprio banco de dados e, a seguir, o SGBD e os softwares relacionados. Administrar esses recursos é responsabilidade do administrador de banco de dados - database administrator (DBA). O DBA é o responsável pela autorização para o acesso ao banco, pela coordenação e monitoração de seu uso e por adquirir recursos de software e hardware conforme necessário. O DBA é o responsável por problemas como brechas de segurança ou tempo de resposta ruim do sistema. Em grandes organizações, o DBA possui suporte de assistentes que o auxiliam no desempenho dessas funções. 

1.4.2 Os Projetistas do Banco de Dados:  Os projetistas do banco de dados são responsáveis pela identificação dos dados que serão armazenados no banco e também por escolher as estruturas apropriadas para representar e armazenar esses dados. Essas tarefas são, em sua maioria, realizadas antes que o banco de dados seja realmente implementado e alimentado com os dados. Ainda é de responsabilidade desse profissional comunicar-se antecipadamente com todos os prováveis usuários do banco para conhecer suas necessidades (requisitos) e criar projetos que as atendam. Em alguns casos, os projetistas estão na equipe do DBA e podem executar outras tarefas, depois que o projeto do banco de dados estiver completo. Os projetistas de banco de dados normalmente interagem com os potenciais grupos de usuários e desenvolvem visões (views) do banco de dados que atendam aos requisitos de dados e ao processamento desses grupos. Cada visão é, então, analisada e integrada às visões de outros grupos de usuários. O projeto final do banco de dados deve ser capaz de suportar todos os requisitos de todos os grupos de usuários

1.6 VANTAGENS DA UTILIZAÇÃO DA ABORDAGEM SGBD Nesta seção, discutiremos as vantagens da utilização e as funcionalidades que um bom SGBD deve possuir. Elas vão além das quatro características principais abordadas na Seção 1.3. O DBA deve usar essas capacidades para atingir os objetivos relacionados ao  projeto, administração e uso de um grande banco de dados multiusuário.

1.6.3 Garantindo o Armazenamento Persistente para Objetos Programas Os bancos de dados podem ser usados para oferecer um armazenamento persistente aos objetos programas e estruturas de dados. Essa é uma das principais justificativas para os sistemas de banco de dados orientados a objeto. As linguagens de programação têm uma estrutura de dados complexa, como os tipos de registro em Pascal ou as definições de classe em C++ ou Java. Os valores das variáveis dos programas são descartados, uma vez que o programa termina sua execução, a não ser que o programador os armazene, explicitamente, em arquivos permanentes, os quais, normalmente, envolvem a conversão de estruturas complexas em um formato adequado para o armazenamento em arquivos. Quando surge a necessidade de ler os dados mais uma vez, o programador deve convertê-los do formato de arquivo para uma estrutura variável do programa. Os sistemas de banco de dados orientado a objeto são compatíveis com as linguagens de programação como C++ e Java, e o software SGBD, automaticamente, executa qualquer conversão necessária. Conseqüentemente, um objeto complexo em C++ pode ser armazenado permanentemente em um SGBD orientado a objeto.
Esse objeto é conhecido como persistente, desde que exista após o término de execução dos programas e possa, depois, ser acessado por outro programa em C+ + . O armazenamento persistente de programas e as estruturas de dados são uma importante função do sistema de banco de dados. Os sistemas tradicionais de banco de dados geralmente possuem o chamado problema de separação por impedância, quando as estruturas de dados fornecidas pelo SGBD são incompatíveis com as estruturas de dados da linguagem de programação. Os sistemas de banco de dados orientados a objeto oferecem estruturas de dados compatíveis com uma ou mais linguagens de programação orientadas a objeto.

1.6.4 Garantindo o Armazenamento de Estruturas para o Processamento Eficiente de Consultas Os sistemas de banco de dados devem fornecer funcionalidades para a execução de atualizações e consultas eficientemente. Pelo fato de o banco de dados ser armazenado, tipicamente, em disco, o SGBD deve possuir estruturas de dados especializadas para aumentar a velocidade de pesquisa no disco dos registros desejados. Os arquivos auxiliares, chamados indexes (indexados), são utilizados com esse objetivo. Os indexes são baseados em estruturas de dados árvores (tree) ou estruturas de dados hash, adequadamente adaptados para a pesquisa em disco. Com o intuito de processar os registros necessários do banco de dados para uma consulta particular, aqueles registros devem ser copiados do disco para a memória. Conseqüentemente, os SGBD em geral têm um módulo de armazenamento temporário (buffering) que mantém partes do banco de dados armazenado na memória principal. Em outros casos, o SGBD pode utilizar o sistema operacional para fazer o armazenamento temporário dos dados no disco. O módulo do SGBD para o processamento de consulta e otimização é responsável pela escolha eficiente do plano de execução da consulta (query) baseado nas estruturas de armazenamento existentes. A opção de qual index criar e manter é parte do projeto físico do banco de dados e seu ajuste (tunning), que é de responsabilidade do DBA e sua equipe.

1.6.5 Garantindo Backup e Restauração Um SGBD deve prover facilidades para a restauração de falhas de hardware ou de software. O subsistema de backup e recuperação dos subsistemas do SGBD é responsável pela recuperação dessas falhas. Por exemplo, se um sistema de computador falhar no meio de uma transação complexa de atualização, o subsistema de recuperação é responsável por garantir que o banco de dados seja recolocado no mesmo estado em que estava, antes do início da execução da transação. Alternativamente, o subsistema pode assegurar que a transação seja resumida do ponto em que foi interrompida - sendo assim, seu efeito completo seria armazenado no banco de dados.

1.6.6 Fornecendo Múltiplas Interfaces para os Usuários Como diversos tipos de usuários com níveis de conhecimento técnico diferentes utilizam o banco de dados, o SGBD deve fornecer interfaces diferentes para esses usuários. Essas interfaces incluem linguagens de consulta para os usuários casuais; interfaces de linguagens de programação para programadores de aplicações; formulários e seqüências de comandos para usuários parametrizáveis; interfaces de menus, interfaces de linguagem natural para usuários autônomos. Ambas, as interfaces com menus e aquelas com formulários, são comumente conhecidas como interfaces gráficas para os usuários - Graphical User Interfaces (GUIs). Muitos ambientes e linguagens especializadas existem para a especificação de GUIs. As capacidades para gerar interfaces Web GUI para um banco de dados - ou capacitando um banco de dados para a Web (Web-enabling) - também são muito comuns.

1.8 QUANDO NÃO USAR O SGBD Apesar das vantagens no uso do SGBD, há algumas situações em que esse sistema pode envolver custos altos e desnecessários, que normalmente não ocorreriam no processamento tradicional de arquivos. Os altos custos de utilizar o SGBD são devidos a: - Investimentos iniciais altos em hardware, software e treinamento. - Generalidade que o SGBD fornece para a definição e processamento dos dados. - Custos elevados para oferecer segurança, controle de concorrência, recuperação e funções de integridade. Problemas adicionais podem surgir se os projetistas do banco de dados e o DBA não projetarem o banco de dados de maneira adequada ou se a aplicação não for implementada apropriadamente. Sendo assim, pode-se indicar o uso de arquivos convencionais nas seguintes circunstâncias: - O banco de dados e suas aplicações são simples, bem definidas e sem previsão de mudanças. - Há requisitos de tempo real (real-time) para alguns programas difíceis de serem atendidos por causa da sobrecarga (overhead) do SGBD.- O acesso de múltiplos usuários aos dados não é necessário

Exercícios: 1.1 Defina os seguintes termos: dados, banco de dados, SGBD, sistema de banco de dados, catálogo de banco de dados, independência programa-dados, visão do usuário (-user view), DBA, usuário final, transação enlatada (customizada), sistema de banco de dados dedutivo, objeto persistente, metadados e aplicação de processamento de transação. 1.2 Quais são os três tipos principais de ações que envolvem um banco de dados? Discuta brevemente cada um deles. 1.3 Discuta as características principais da abordagem de um banco de dados e como ela difere dos sistemas tradicionais de arquivos. 1.4 Quais são as responsabilidades do DBA e dos projetistas de banco de dados? 1.5 Quais são os diferentes tipos de usuários finais de banco de dados? Discuta as atividades principais de cada um. 1.6 Discuta as funcionalidades que podem ser fornecidas por um SGBD. Exercícios 1.7 Identifique algumas consultas informais e operações de atualizações que você poderia aplicar ao banco de dados exposto na Figura 1.2. 1.8 Qual a diferença entre a redundância controlada e aquela sem controle? Ilustre com exemplos. 1.9 Nomeie todos os relacionamentos entre os registros do banco de dados apresentados na Figura 1.2. 1.10 Apresente algumas visões adicionais para o banco de dados visto na Figura 1.2 que podem ser necessárias para outros grupos de usuários.

Bibliografia Selecionada Em outubro de 1991, a edição de Communications ofthe ACM e Kim (1995) apresentou vários artigos descrevendo a próxima geração dos SGBDs; diversas características de um banco de dados, discutidas na época, estão totalmente disponíveis. A edição de março de 1976 da ACM Computing Surveys apresenta uma introdução pioneira aos sistemas de banco de dados e fornece uma perspectiva histórica para o leitor interessado.

2. Sistemas de Bancos de Dados: Conceitos e Arquitetura A arquitetura dos pacotes SGBDs (sistemas gerenciadores de bancos de dados) evoluiu dos sistemas pioneiros e monolíticos, em que o pacote de softwares SGBD era um bloco único formando um sistema fortemente integrado, para os modernos pacotes SGBDs modulares por projeto, com uma arquitetura cliente/servidor. Essa evolução reflete as tendências na computação, na qual os computadores grandes e centralizados (mainframes) estão sendo substituídos por vários PCs (computadores pessoais) e workstations (estações de trabalho) conectados via redes de comunicações a vários tipos de servidores - servidores Web, servidores de bancos de dados, servidores de arquivos, servidores de aplicações e assim por diante. Em uma estrutura básica de SGBD cliente/servidor, as funcionalidades do sistema são distribuídas entre dois tipos de módulos. O módulo cliente é projetado para ser executado em uma estação de trabalho ou em um computador pessoal. Em geral, os programas de aplicação e as interfaces de usuário, que acessam o banco de dados, são processados no módulo cliente.
Conseqüentemente, o módulo cliente trata a interação com os usuários e oferece uma interface amigável, como formulários ou GUIs (interfaces gráficas para os usuários) baseadas em menus. Outro tipo de módulo, chamado módulo servidor, trata de armazenamento de dados, acessos, pesquisas e outras funções. Discutiremos as arquiteturas cliente/servidor detalhadamente na Seção 2.5. Primeiro, estudaremos os conceitos mais básicos que nos propiciarão melhor entendimento das arquiteturas modernas de banco de dados. Neste capítulo apresentaremos a terminologia e os conceitos básicos utilizados neste livro. Começaremos, na Seção 2.1, discutindo os modelos de dados e definindo os conceitos de esquemas e instâncias, fundamentais para o estudo de sistemas de banco de dados. Discutiremos, então, a arquitetura de SGBD de três esquemas e a independência dos dados na Seção 2.2, o que oferece uma perspectiva para o usuário do que o SGBD deve fazer. Na Seção 2.3 descreveremos os tipos de interfaces e linguagens oferecidas normalmente por um SGBD. Na Seção 2.4 veremos o ambiente de programas dos sistemas de bancos de dados. A Seção 2.5 apresenta uma visão geral dos vários tipos de arquiteturas cliente/servidor. Finalmente, na Seção 2.6 mostraremos uma classificação dos tipos de pacotes SGBD

2.2 ARQUITETURA DE TRÊS-ESQUEMAS E A INDEPENDÊNCIA DE DADOS Três das quatro características importantes da abordagem com uso de banco de dados, listados na Seção 1.3, são: 1- separação de programas e dados (independência de dados e operação de programas); 2- suporte a múltiplas visões (views) de usuários, e 3- uso de catálogo para armazenar a descrição do banco de dados (esquema). Nesta seção, definiremos uma arquitetura para os sistemas de banco de dados, chamada arquitetura de três-esquemas, proposta para auxiliar a realização e visualização dessas características. Depois disso, aprofundaremos a discussão sobre a independência dos dados.

2.2.1 A Arquitetura de Três-Esquemas O objetivo da arquitetura de três-esquemas, ilustrada na Figura 2.2, é separar o usuário da aplicação do banco de dados físico. Nessa arquitetura, os esquemas podem ser definidos por três níveis: 1. O nível interno tem um esquema interno, que descreve a estrutura de armazenamento físico do banco de dados. Esse esquema utiliza um modelo de dado físico e descreve os detalhes complexos do armazenamento de dados e caminhos de acesso ao banco de dados.

2. O nível conceitual possui um esquema conceitual, que descreve a estrutura de todo o banco de dados para a comunidade de usuários. O esquema conceitual oculta os detalhes das estruturas de armazenamento físico e se concentra na descrição de entidades, tipos de dados, conexões, operações de usuários e restrições. Geralmente, um modelo de dados representacional é usado para descrever o esquema conceitual quando o sistema de banco de dados for implementado. Esse esquema de implementação conceitual é normalmente baseado em um projeto de esquema conceitual em um modelo de dados de alto nível.

3. O nível externo ou visão (view) abrange os esquemas externos ou visões de usuários. Cada esquema externo descreve a parte do banco de dados que um dado grupo de usuários tem interesse e oculta o restante do banco de dados desse grupo. Como no item anterior, cada esquema externo é tipicamente implementado usando-se um modelo de dados representacional, possivelmente baseado em um projeto de esquema externo em um modelo de dados de alto nível. A arquitetura de três-esquemas é uma ferramenta conveniente com a qual o usuário pode visualizar os níveis do esquema em um sistema de banco de dados. A maioria dos SGBDs não separa os três níveis completamente, mas suporta a arquitetura de trêsesquemas de alguma forma. Alguns SGBDs incluem detalhes do nível físico no esquema conceitual. Na maioria dos SGBDs que oferece suporte a diferentes visões de usuários, os esquemas externos são especificados no mesmo modelo de dados que descreve a informação no nível conceitual. Alguns SGBDs permitem que diferentes modelos de dados sejam usados nos níveis conceitual e externo.

Observe que os três esquemas são apenas descrições dos dados; na verdade, o dado que existe de fato está no nível físico. Em um SGBD baseado na arquitetura de três-esquemas, cada grupo de usuários refere-se somente ao seu próprio esquema externo. Conseqüentemente, o SGBD deve transformar uma solicitação definida no esquema externo em uma solicitação do esquema conceitual, para, então, transformá-la em uma solicitação do esquema interno, a fim de processar o banco de dados armazenado. Se a solicitação for uma recuperação, o dado extraído do banco de dados armazenado deve ser reformatado para adaptar-se à visão externa do usuário. Os processos de transformação de solicitações e resultados entre os níveis são chamados mapeamentos. Podem ser consumidores de tempo, sendo assim, alguns SGBDs - especialmente aqueles responsáveis pelo suporte a pequenos bancos de dados - não suportam visões externas. Contudo, até mesmo nesses sistemas, uma certa quantidade de mapeamento é necessária para transformar solicitações entre os níveis conceitual e interno.

2.2.2 Independência de Dados A arquitetura de três-esquemas pode ser usada para explicar melhor o conceito de independência de dados, que pode ser definido como a capacidade de mudar o esquema em um nível do sistema de banco de dados sem que ocorram alterações do esquema no próximo nível mais alto. É possível definir, ainda, dois tipos de independência de dados: 1. Independência de dados lógica: é a capacidade de alterar o esquema conceitual sem mudar o esquema externo ou os programas. Podemos modificar o esquema conceitual para expandir o banco de dados (adicionando um tipo de registro ou item de dados), variar as restrições ou reduzir o banco de dados (removendo um tipo de registro ou item de dados). No último caso, os esquemas externos que se referem apenas aos dados remanescentes não precisariam ser afetados. Por exemplo, o esquema externo da Figura 1.4a não deveria ser afetado pela mudança do arquivo HISTORICO_ESCOLAR mostrado na Figura 1.2 para aquele exibido na Figura 1.5a. Somente a definição da visão e os mapeamentos precisam ser alterados em um SGBD que suporta a independência lógica dos dados. Após uma reorganização lógica no esquema conceitual, os programas que utilizam os construtores do esquema externo devem funcionar como antes da reorganização. As alterações nas restrições podem ser aplicadas ao esquema conceitual, sem afetar os esquemas externos ou os programas.

2. Independência física de dados: refere-se à capacidade de mudar o esquema interno sem ter de alterar o esquema conceitual. Conseqüentemente, o esquema externo também não precisa ser modificado. As mudanças no esquema interno podem ser necessárias para que alguns arquivos físicos possam ser reorganizados - por exemplo, pela criação de estruturas de acesso adicionais - para aperfeiçoar o desempenho da recuperação ou atualização de dados. Se os mesmos dados permanecem como anteriormente no banco de dados, não deveríamos ter de alterar o esquema conceitual. Por exemplo, criando uma rota de acesso (access path) para aumentar a velocidade de recuperação de registros de DISCIPLINAS (Figura 1.2) por Semestre e Ano, não será preciso que uma consulta como 'listar todas as disciplinas oferecidas no segundo semestre de 1998' fosse alterada, embora a consulta pudesse ser executada de forma mais eficiente pelo SGBD por meio do novo caminho de acesso. Se temos um SGBD múltiplo-nível, seu catálogo deve ser expandido para incluir as informações de como solicitar o mapeamento e dados entre os vários níveis.
O SGBD usa software adicional para realizar esses mapeamentos utilizando a informação de mapeamento no catálogo. A independência de dados ocorre porque quando o esquema é alterado em algum nível, o esquema no próximo nível acima permanece sem mudanças; apenas o mapeamento entre os dois níveis é modificado. Por isso, os programas que se referem ao esquema do nível mais alto não precisam ser alterados. A arquitetura de três-esquemas pode tornar mais fácil a independência de dados, tanto física quanto lógica. Entretanto, os doisníveis de mapeamentos criam uma sobrecarga (overhead) durante a compilação ou a execução de uma consulta ou de um programa,provocando ineficiências no SGBD. Por causa disso, poucos SGBDs têm implementadas toda a arquitetura de três-esquemas. 