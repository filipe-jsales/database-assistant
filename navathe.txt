Os bancos de dados e os sistemas de bancos de dados se tornaram componentes essenciais no cotidiano da sociedade moderna. No decorrer do dia, a maioria de nós se depara com atividades que envolvem alguma interação com os bancos de dados. Por exemplo, se formos ao banco para efetuarmos um depósito ou retirar dinheiro, se fizermos reservas em um hotel ou para a compra de passagens aéreas, se acessarmos o catálogo de uma biblioteca informatizada para consultar uma bibliografia, ou se comprarmos produtos - como livros, brinquedos ou computadores - de um fornecedor por intermédio de sua página Web, muito provavelmente essas atividades envolverão uma pessoa ou um programa de computador que acessará um banco de dados. Até mesmo os produtos adquiridos em supermercados, em muitos casos, atualmente, incluem uma atualização automática do banco de dados que mantém o controle do estoque disponível nesses estabelecimentos. Essas interações são exemplos do que podemos denominar aplicações tradicionais de banco de dados, no qual a maioria das informações que são armazenadas e acessadas apresenta-se em formatos textual ou numérico. Nos últimos anos, os avanços tecnológicos geraram aplicações inovadoras e interessantes dos sistemas de banco de dados. Os bancos de dados de multimídia podem, agora, armazenar figuras, videoclipes e mensagens sonoras. Os sistemas de informações geográficas (geographic information systems - GIS) são capazes de armazenar e analisar mapas, dados do tempo e imagens de satélite. Os data warehouses e os online analytical processing (OLAP) - processamento analítico on-line - são utilizados em muitas empresas para extrair e analisar as informações úteis dos bancos de dados para a tomada de decisões. A tecnologia de bancos de dados ativos (active database technology) e real time (tempo real) são usados no controle de processos industriais e de produção (indústria). As técnicas de pesquisa em banco de dados estão sendo aplicadas na World Wide Web para aprimorar a recuperação de informações necessárias pelos usuários da Internet. Entretanto, para entendermos os fundamentos da tecnologia de banco de dados, devemos começar pelas aplicações tradicionais de bancos de dados. Sendo assim, na Seção 1.1 deste capítulo, definimos o que é um banco de dados e conceituamos alguns termos básicos. Na Seção 1.2 apresentamos um banco de dados como exemplo, uma UNIVERSIDADE, para ilustrar nossa discussão. Em seguida, na Seção 1.3, descrevemos algumas características principais dos sistemas de banco de dados, e nas seções 1.4 e 1.5 categorizamos os tipos de pessoas cujas profissões envolvem o uso e a interação com os sistemas de banco de dados. Nas seções 1.6, 1.7 e 1.8 discutiremos as diversas capacidades de um sistema de banco de dados e algumas aplicações típicas. A Seção 1.9 resume todo o capítulo.
1.1 Introdução: Os bancos de dados e a sua tecnologia estão provocando um grande impacto no crescimento do uso de computadores. É viável afirmar que eles representam um papel crítico em quase todas as áreas em que os computadores são utilizados, incluindo negócios, comércio eletrônico, engenharia, medicina, direito, educação e as ciências da informação, para citar apenas algumas delas. A palavra banco de dados é tão comumente utilizada que, primeiro, devemos defini-la. Nossa definição inicial é bastante genérica. Um banco de dados é uma coleção de dados relacionados. Os dados são fatos que podem ser gravados e que possuem um significado implícito. Por exemplo, considere nomes, números telefônicos e endereços de pessoas que você conhece. Esses dados podem ter sido escritos em uma agenda de telefones ou armazenados em um computador, por meio de programas como o Microsoft Access ou  Excel. Essas informações são uma coleção de dados com um significado implícito, conseqüentemente, um banco de dados. A definição de banco de dados, mencionada anteriormente, é muito genérica. Por exemplo, podemos considerar o conjunto de palavras que formam esta página como dados relacionados, portanto, constituindo um banco de dados. No entanto, o uso do termo banco de dados é geralmente mais restrito. Possui as seguintes propriedades implícitas:  Um banco de dados representa alguns aspectos do mundo real, sendo chamado, às vezes, de minimundo ou de universo de discurso (UoD). As mudanças no minimundo são refletidas em um banco de dados.  Um banco de dados é uma coleção lógica e coerente de dados com algum significado inerente. Uma organização de dados ao acaso (randômica) não pode ser corretamente interpretada como um banco de dados.  Um banco de dados é projetado, construído e povoado por dados, atendendo a uma proposta específica. Possui um grupo de usuários definido e algumas aplicações preconcebidas, de acordo com o interesse desse grupo de usuários. Em outras palavras, um banco de dados possui algumas fontes das quais os dados são derivados, alguns níveis de interação com os eventos do mundo real e um público efetivamente interessado em seus conteúdos. Um banco de dados pode ser de qualquer tamanho e de complexidade variável. Por exemplo, a lista de nomes e endereços, citada anteriormente, pode possuir apenas poucas centenas de registros, cada um com uma estrutura simples. Porém, o catálogo computadorizado de uma grande biblioteca pode conter meio milhão de entradas organizadas em diferentes categorias - pelo sobrenome principal do autor, pelo assunto, pelo título -, sendo cada categoria organizada em ordem alfabética. Um banco de dados muito maior e mais complexo é mantido pelo Internal Revenue Service (IRS), órgão responsável pelo controle dos formulários de impostos preenchidos pelos contribuintes dos Estados Unidos.
Se pressupomos que existam cem milhões de contribuintes e cada um deles preenche em média cinco formulários com aproximadamente 400 caracteres de informações por formulário, teríamos um banco de dados de 100 x 10° x 400 x 5 caracteres (bytes) de informação. Se o IRS mantiver os últimos três formulários para cada contribuinte teremos, além do atual, um banco de dados de 8 x 100 bytes (800 gigabytes). Essa imensa quantidade de informação deve ser organizada e gerenciada para que os usuários possam pesquisar, recuperar e atualizar os dados necessários. Um banco de dados pode ser gerado e mantido manualmente ou pode ser automatizado (computadorizado). Por exemplo, um catálogo de cartões bibliotecários é um banco de dados que oferece a possibilidade de ser criado e mantido manualmente. Um banco de dados computadorizado pode ser criado e mantido tanto por um grupo de aplicativos escritos especialmente para essa tarefa como por um sistema gerenciador de banco de dados. É claro que, neste livro, o objetivo é abordar os bancos de dados computadorizados. Um sistema gerenciador de banco de dados (SGBD) é uma coleção de programas que permite aos usuários criar e manter um banco de dados. O SGBD é, portanto, um sistema de software de propósito geral que facilita os processos de definição, construção, manipulação e compartilhamento de bancos de dados entre vários usuários e aplicações. A definição de um banco de dados implica especificar os tipos de dados, as estruturas e as restrições para os dados a serem armazenados em um banco de dados. A construção de um banco de dados é o processo de armazenar os dados em alguma mídia apropriada controlada pelo SGBD. A manipulação inclui algumas funções, como pesquisas em banco de dados para recuperar um dado específico, atualização do banco para refletir as mudanças no minimundo e gerar os relatórios dos dados. O compartilhamento permite aos múltiplos usuários e programas acessar, de forma concorrente, o banco de dados. Outras funções importantes do SGBD são a proteção e a manutenção do banco de dados por longos períodos. A proteção inclui a proteção do sistema contra o mau funcionamento ou falhas (crashes) no hardware ou software, e segurança contra acessos não autorizados ou maliciosos. Um banco de dados típico pode ter um ciclo de vida de muitos anos, então, os SGBD devem ser capazes de manter um sistema de banco de dados que permita a evolução dos requisitos que se alteram ao longo do tempo. Não é necessário usar os softwares SGBD típicos para implementar um banco de dados computadorizado. Poderíamos escrever nosso próprio conjunto de programas para criar e manter um banco de dados criando, de fato, nosso próprio SGBD com uma finalidade específica. Nesses casos - se usarmos um SGBD de propósito geral ou não -, normalmente teremos de desenvolver uma quantidade considerável de softwares complexos.
Na verdade, a maioria dos SGBD é composta por sistemas muito complexos. Para completar nossa definição inicial chamaremos o banco de dados e o software SGBD, juntos, de sistema de banco de dados. A Figura 1.1 ilustra alguns dos conceitos discutidos. 1.2 UM EXEMPLO Considerando um exemplo simples com o qual a maioria dos leitores está muito familiarizada: um banco de dados de uma UNIVERSIDADE,  no qual são mantidas as informações do meio acadêmico, como alunos, cursos e notas. A Figura 1.2 mostra a estrutura do banco de dados e fornece uma pequena amostra dos dados desse banco. O banco é organizado em cinco arquivos, cada um armazena os registros de dados do mesmo tipo. O arquivo ALUNO conserva os dados de cada estudante, o CURSO preserva os dados sobre cada curso, o arquivo DISCIPLINA guarda os dados de cada disciplina do curso. Continuando, o arquivo HISTORICO_ESCOLAR mantém as notas recebidas por aluno nas diversas disciplinas cursadas e, finalmente, o arquivo PRE_REQUISITO armazena os pré-requisitos de cada curso. Para definir esse banco de dados devemos especificar a estrutura de cada registro em cada arquivo, considerando-se os diferentes tipos de elementos dos dados a serem armazenados em cada registro. Na Figura 1.2, cada registro ALUNO inclui os dados que representam o NomedoEstudante, NumerodoAluno, Turma (calouro ou 1, veterano ou 2...) e Curso Habilitação (matemática ou mat, ciência da computação ou CC...); cada registro CURSO apresenta dados como NomedoCurso, NumerodoCurso, Créditos e Departamento (que oferece o curso) etc. Precisamos ainda especificar os tipos de dados para cada elemento de dados em um registro. Por exemplo, podemos especificar que nome em ALUNO é uma string (cadeia) de caracteres alfabéticos, número do aluno em ALUNO é um inteiro (integer) e o HISTORICO_ESCOLAR é um caractere único do conjunto {A, B, C, D, F, I}. Podemos usar ainda um esquema de código para representar os valores de um determinado dado. Por exemplo, na Figura 1.2, representamos a turma do ALUNO por 1 para os calouros; 2 para os veteranos; 3 para os que cursam o penúltimo ano; 4 para aqueles do último ano; e 5 para os alunos graduados. Para construir o banco de dados UNIVERSIDADE armazenamos os dados que representem cada aluno, curso, disciplina, relatório de notas e pré-requisitos, bem como cada registro no arquivo apropriado. Pode-se perceber que os registros de diferentes arquivos podem estar relacionados. Por exemplo, o registro para "Smith" no arquivo ALUNO está relacionado a dois registros no arquivo  HISTORICO_ESCOLAR, cuja função é especificar as notas de Smith em duas disciplinas. Por similaridade, cada registro, no arquivo PRE_REQUISITO, está relacionado a dois registros em curso: um representando o curso e o outro, o pré-requisito. A maioria dos bancos de dados médios e grandes inclui muitos tipos de registros e tem muitos relacionamentos entre os registros.

Um número significativo de características distingue a abordagem que utiliza o banco de dados daquela tradicional que usa a programação e arquivos. No tradicional processamento de arquivos, cada usuário define e implementa os arquivos necessários para  uma aplicação específica, como parte da programação da aplicação. Por exemplo, um usuário, a secretaria de notas, pode manter um arquivo para os alunos e suas notas. Os programas para imprimir um histórico do aluno e colocar novas notas no arquivo são implementados como parte da aplicação. Um segundo usuário, o departamento de contabilidade, pode controlar os dados relacionados às mensalidades e pagamentos dos alunos. Apesar de ambos os usuários estarem interessados nos dados sobre os estudantes, cada um mantém suas informações em arquivos separados - e os programas que manipulam esses arquivos - porque cada um deles precisa de alguns dados não disponíveis nos arquivos do outro.
Essas redundâncias, na definição e armazenamento dos dados, resultam em um espaço de armazenamento desperdiçado e em esforços redundantes para manter os dados comuns atualizados. Na abordagem utilizando um banco de dados, um único repositório de dados é definido uma única vez, mantido e então acessado por vários usuários. As principais características da abordagem de um banco de dados versus a abordagem de processamento de arquivos são as seguintes: - Natureza autodescritiva do sistema de banco de dados. - Isolamento entre os programas e os dados, e a abstração dos dados. - Suporte para as múltiplas visões dos dados. - Compartilhamento de dados e processamento de transações de multiusuários.  Descreveremos, a seguir, cada característica em seções separadas. As características adicionais dos sistemas de banco de dados serão discutidas nas seções 1.6 a 1.8.

**Seção 1.3.1 Natureza Autodescritiva do Sistema de Banco de Dados:**  Uma característica fundamental da abordagem de um banco de dados é que o sistema de banco de dados possui não apenas o banco de dados, mas também uma completa definição ou descrição da estrutura desse banco de dados e suas restrições. Essa definição está armazenada no catálogo do SGBD, que contém informações como a estrutura de cada arquivo, o tipo e o formato de armazenamento de cada item de dado e várias restrições sobre os dados. A informação armazenada no catálogo é chamada metadados e descreve a estrutura do banco de dados primário (Figura 1.1). O catálogo é usado tanto pelo software SGBD como pelos usuários do banco de dados que precisam de informações sobre a estrutura desse banco. Um pacote de software SGBD de propósito geral não está escrito para uma aplicação específica, portanto, será necessário acessar o catálogo para conhecer a estrutura dos arquivos no banco de dados, como o tipo e o formato dos dados que o programa vai acessar. O SGBD precisa trabalhar bem com qualquer número de aplicações - por exemplo, um banco de dados de uma universidade, de um banco ou de uma empresa -, desde que a definição do banco de dados esteja armazenada no catálogo. No processamento tradicional de arquivos, a definição dos dados faz parte dos próprios programas da aplicação. Em conseqüência disso, esses programas são restritos a trabalhar com um único banco de dados específico, cuja estrutura esteja declarada no programa da aplicação. Por exemplo, um software de uma aplicação escrito em C++ pode ter a struct ou a declaração de classes, e um programa em COBOL tem comandos na Data Division para definir seus arquivos. Porém, o programa de processamento de arquivos possibilita o acesso a um único banco de dados específico, enquanto o SGBD pode acessar diversos bancos de dados, extraindo as definições de banco de dados do catálogo e usando-as depois. No exemplo mostrado na Figura 1.2, o catálogo do SGBD armazenará as definições de todos os arquivos mostrados. Elas são especificadas pelo projetista antes de criar o banco de dados real e armazenadas no catálogo. Todas as vezes que um pedido for feito para acessar, digamos, o registro Nome de um ALUNO, o SGBD se referirá ao catálogo para determinar a estrutura do arquivo ALUNO e a posição e tamanho do item de dado Nome dentro do registro ALUNO. Em contraste, em uma aplicação típica de processamento de arquivos, a estrutura do arquivo e a localização exata, no caso extremo, de Nome dentro do registro ALUNO, já estão codificadas em cada programa que acessa esses itens de dados. 

**Seção 1.3.2 Isolamento entre os Programas e Dados e Abstração de Dados:** No processamento tradicional de arquivos, a estrutura do arquivo de dados está embutida no programa da aplicação, sendo assim, qualquer mudança na estrutura de um arquivo pode exigir alterações de todos os programas que acessam esse arquivo. Ao contrário, os programas para acesso ao SGBD não exigem essas alterações na maioria dos casos. A estrutura dos arquivos de dados é armazenada no catálogo do SGDB separadamente do programa de acesso. Denominaremos essa propriedade independência programadados. Por exemplo, o programa de acesso a arquivos pode ser escrito de forma que acesse, apenas, os registros ALUNO da estrutura apresentada na Figura 1.3. Se quisermos adicionar outro dado ao registro de cada ALUNO, digamos, sua DatadeNascimento, esse programa não vai trabalhar por muito tempo e precisará ser alterado. Ao contrário, em um ambiente SGBD, necessitamos alterar apenas a descrição do registro ALUNO no catálogo para refletir a inclusão do novo item de dados DatadeNascimento; nenhum programa será modificado. A próxima vez que um programa SGBD acessar o catálogo, a nova estrutura do registro ALUNO será acessada e utilizada. Em alguns tipos de sistemas de banco de dados, como o orientado a objeto e o objeto-relacional (capítulos 20 a 22), os usuários podem estabelecer as operações sobre os dados como parte das definições de dados. Uma operação (também chamada função ou método) é especificada em duas partes. A interface (ou assinatura) de uma operação inclui o nome da operação e os tipos de dados de seus argumentos (ou parâmetros). A implementação (ou método) de uma operação é definida separadamente e pode ser alterada sem afetar a interface. Os programas de usuários da aplicação podem operar nos dados invocando essas operações por meio de seus nomes e argumentos, sem considerar como essas operações são implementadas. Isso pode ser chamado de independência programaoperação. A característica que permite a independência programa-dados e programa-operação é intitulada abstração de dados. Um SGBD oferece aos usuários uma representação conceitual de dados que não inclui muitos detalhes sobre como o dado é armazenado ou como as operações são implementadas. Informalmente, o modelo de dados é um tipo de abstração de dados usado para prover essa representação conceitual. O modelo de dados utiliza os conceitos lógicos, como objetos, suas propriedades e seus interrelacionamentos, que podem ser mais fáceis para os usuários entenderem os conceitos de armazenamento computacionais. Conseqüentemente, o modelo de dados esconde os detalhes de armazenamento e da implementação, desinteressantes para a maioria dos usuários de banco de dados.
Por exemplo, vamos considerar novamente a Figura 1.2. A implementação interna do arquivo pode ser definida pelo comprimento de seus registros -, o número de caracteres (bytes) em cada registro -, e cada item de dado pode ser especificado pelo seu byte inicial dentro de um registro e seu comprimento em bytes. O registro ALUNO poderia, em razão disso, ser representado como exposto na Figura 1.3. No entanto, um usuário típico de banco de dados não está preocupado com a localização de cada item de dados dentro de um registro ou com o seu comprimento; na realidade, sua preocupação é que quando for acessado o Nome do ALUNO, O valor correto seja retornado. Uma representação conceitual dos registros ALUNO é mostrada na Figura 1.2. Muitos outros detalhes da organização do armazenamento de dados, como os caminhos de acesso especificados em um arquivo, podem ser escondidos dos usuários de banco de dados pelo SGBD - discutiremos os detalhes do armazenamento nos capítulos 13 e 14. Na abordagem de banco de dados, a estrutura detalhada e a organização de cada arquivo são armazenadas no catálogo. Os usuários de banco de dados e os programas de aplicação referem-se à representação conceitual dos arquivos, e o SGBD extrai os detalhes do armazenamento de arquivos do catálogo, quando são necessários, pelos módulos de acesso a arquivos do SGBD. Muitos modelos de dados podem ser utilizados para prover essa abstração dos dados aos usuários do banco. A maior parte deste livro é dedicada à apresentação dos vários modelos de dados e os conceitos que estes utilizam para abstrair a representação dos dados. Nos bancos de dados orientados a objeto e a objeto-relacional, o processo de abstração não inclui apenas a estrutura de dados, mas também as operações sobre os dados. Essas operações oferecem uma abstração das atividades do minimundo facilmente entendidas pelos usuários. Por exemplo, uma operação de CALCULO_GPA pode ser aplicada ao objeto ALUNO para calcular a média de pontos nas notas. Essas operações podem ser invocadas pela consulta do usuário ou pelos programas de aplicação sem ter de se saber os detalhes de como as operações são implementadas. Nesse sentido, uma abstração de uma atividade de um minimundo está disponível para o usuário como uma operação abstrata.